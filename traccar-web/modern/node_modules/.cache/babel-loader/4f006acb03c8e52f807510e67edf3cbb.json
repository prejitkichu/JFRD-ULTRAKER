{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal_Projects\\\\Vehicle Tracking\\\\Development2.0\\\\JFRD-ULTRAKER\\\\traccar-web\\\\modern\\\\src\\\\reports\\\\EventReportPage.js\";\nimport React, { useState } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { formatDate } from '../common/formatter';\nimport ReportFilter from './ReportFilter';\nimport ReportLayout from './ReportLayout';\nimport { prefixString } from '../common/stringUtils';\nimport t from '../common/localization';\n\nconst Filter = _ref => {\n  let {\n    setItems\n  } = _ref;\n  const [eventTypes, setEventTypes] = useState(['allEvents']);\n\n  const handleSubmit = async (deviceId, from, to, mail, headers) => {\n    const query = new URLSearchParams({\n      deviceId,\n      from,\n      to,\n      mail\n    });\n    eventTypes.forEach(it => query.append('type', it));\n    const response = await fetch(`/api/reports/events?${query.toString()}`, {\n      headers\n    });\n\n    if (response.ok) {\n      const contentType = response.headers.get('content-type');\n\n      if (contentType) {\n        if (contentType === 'application/json') {\n          setItems(await response.json());\n        } else {\n          window.location.assign(window.URL.createObjectURL(await response.blob()));\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ReportFilter, {\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"filled\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, t('reportEventTypes')), /*#__PURE__*/React.createElement(Select, {\n    value: eventTypes,\n    onChange: e => setEventTypes(e.target.value),\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"allEvents\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, t('eventAll')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"deviceOnline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, t('eventDeviceOnline')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"deviceUnknown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, t('eventDeviceUnknown')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"deviceOffline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, t('eventDeviceOffline')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"deviceInactive\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, t('eventDeviceInactive')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"deviceMoving\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, t('eventDeviceMoving')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"deviceStopped\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, t('eventDeviceStopped')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"deviceOverspeed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, t('eventDeviceOverspeed')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"deviceFuelDrop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, t('eventDeviceFuelDrop')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"commandResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, t('eventCommandResult')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"geofenceEnter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, t('eventGeofenceEnter')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"geofenceExit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, t('eventGeofenceExit')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"alarm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, t('eventAlarm')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"ignitionOn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, t('eventIgnitionOn')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"ignitionOff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, t('eventIgnitionOff')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"maintenance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, t('eventMaintenance')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"textMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, t('eventTextMessage')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"driverChanged\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, t('eventDriverChanged'))))));\n};\n\nconst EventReportPage = () => {\n  const theme = useTheme();\n  const geofences = useSelector(state => state.geofences.items);\n  const [items, setItems] = useState([]);\n\n  const formatGeofence = value => {\n    if (value > 0) {\n      const geofence = geofences[value];\n      return geofence ? geofence.name : '';\n    }\n\n    return null;\n  };\n\n  const columns = [{\n    headerName: t('positionFixTime'),\n    field: 'serverTime',\n    type: 'dateTime',\n    width: theme.dimensions.columnWidthDate,\n    valueFormatter: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return formatDate(value);\n    }\n  }, {\n    headerName: t('sharedType'),\n    field: 'type',\n    type: 'string',\n    width: theme.dimensions.columnWidthString,\n    valueFormatter: _ref3 => {\n      let {\n        value\n      } = _ref3;\n      return t(prefixString('event', value));\n    }\n  }, {\n    headerName: t('sharedGeofence'),\n    field: 'geofenceId',\n    width: theme.dimensions.columnWidthString,\n    valueFormatter: _ref4 => {\n      let {\n        value\n      } = _ref4;\n      return formatGeofence(value);\n    }\n  }, {\n    headerName: t('sharedMaintenance'),\n    field: 'maintenanceId',\n    type: 'number',\n    width: theme.dimensions.columnWidthString\n  }];\n  return /*#__PURE__*/React.createElement(ReportLayout, {\n    filter: /*#__PURE__*/React.createElement(Filter, {\n      setItems: setItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 27\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: items,\n    columns: columns,\n    hideFooter: true,\n    autoHeight: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EventReportPage;","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/reports/EventReportPage.js"],"names":["React","useState","DataGrid","Grid","FormControl","InputLabel","Select","MenuItem","useTheme","useSelector","formatDate","ReportFilter","ReportLayout","prefixString","t","Filter","setItems","eventTypes","setEventTypes","handleSubmit","deviceId","from","to","mail","headers","query","URLSearchParams","forEach","it","append","response","fetch","toString","ok","contentType","get","json","window","location","assign","URL","createObjectURL","blob","e","target","value","EventReportPage","theme","geofences","state","items","formatGeofence","geofence","name","columns","headerName","field","type","width","dimensions","columnWidthDate","valueFormatter","columnWidthString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport {\r\n  Grid, FormControl, InputLabel, Select, MenuItem,\r\n} from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { useSelector } from 'react-redux';\r\nimport { formatDate } from '../common/formatter';\r\nimport ReportFilter from './ReportFilter';\r\nimport ReportLayout from './ReportLayout';\r\nimport { prefixString } from '../common/stringUtils';\r\nimport t from '../common/localization';\r\n\r\nconst Filter = ({ setItems }) => {\r\n  const [eventTypes, setEventTypes] = useState(['allEvents']);\r\n\r\n  const handleSubmit = async (deviceId, from, to, mail, headers) => {\r\n    const query = new URLSearchParams({\r\n      deviceId, from, to, mail,\r\n    });\r\n    eventTypes.forEach((it) => query.append('type', it));\r\n    const response = await fetch(`/api/reports/events?${query.toString()}`, { headers });\r\n    if (response.ok) {\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType) {\r\n        if (contentType === 'application/json') {\r\n          setItems(await response.json());\r\n        } else {\r\n          window.location.assign(window.URL.createObjectURL(await response.blob()));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReportFilter handleSubmit={handleSubmit}>\r\n      <Grid item xs={12} sm={6}>\r\n        <FormControl variant=\"filled\" fullWidth>\r\n          <InputLabel>{t('reportEventTypes')}</InputLabel>\r\n          <Select value={eventTypes} onChange={(e) => setEventTypes(e.target.value)} multiple>\r\n            <MenuItem value=\"allEvents\">{t('eventAll')}</MenuItem>\r\n            <MenuItem value=\"deviceOnline\">{t('eventDeviceOnline')}</MenuItem>\r\n            <MenuItem value=\"deviceUnknown\">{t('eventDeviceUnknown')}</MenuItem>\r\n            <MenuItem value=\"deviceOffline\">{t('eventDeviceOffline')}</MenuItem>\r\n            <MenuItem value=\"deviceInactive\">{t('eventDeviceInactive')}</MenuItem>\r\n            <MenuItem value=\"deviceMoving\">{t('eventDeviceMoving')}</MenuItem>\r\n            <MenuItem value=\"deviceStopped\">{t('eventDeviceStopped')}</MenuItem>\r\n            <MenuItem value=\"deviceOverspeed\">{t('eventDeviceOverspeed')}</MenuItem>\r\n            <MenuItem value=\"deviceFuelDrop\">{t('eventDeviceFuelDrop')}</MenuItem>\r\n            <MenuItem value=\"commandResult\">{t('eventCommandResult')}</MenuItem>\r\n            <MenuItem value=\"geofenceEnter\">{t('eventGeofenceEnter')}</MenuItem>\r\n            <MenuItem value=\"geofenceExit\">{t('eventGeofenceExit')}</MenuItem>\r\n            <MenuItem value=\"alarm\">{t('eventAlarm')}</MenuItem>\r\n            <MenuItem value=\"ignitionOn\">{t('eventIgnitionOn')}</MenuItem>\r\n            <MenuItem value=\"ignitionOff\">{t('eventIgnitionOff')}</MenuItem>\r\n            <MenuItem value=\"maintenance\">{t('eventMaintenance')}</MenuItem>\r\n            <MenuItem value=\"textMessage\">{t('eventTextMessage')}</MenuItem>\r\n            <MenuItem value=\"driverChanged\">{t('eventDriverChanged')}</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n    </ReportFilter>\r\n  );\r\n};\r\n\r\nconst EventReportPage = () => {\r\n  const theme = useTheme();\r\n  const geofences = useSelector((state) => state.geofences.items);\r\n  const [items, setItems] = useState([]);\r\n\r\n  const formatGeofence = (value) => {\r\n    if (value > 0) {\r\n      const geofence = geofences[value];\r\n      return geofence ? geofence.name : '';\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const columns = [{\r\n    headerName: t('positionFixTime'),\r\n    field: 'serverTime',\r\n    type: 'dateTime',\r\n    width: theme.dimensions.columnWidthDate,\r\n    valueFormatter: ({ value }) => formatDate(value),\r\n  }, {\r\n    headerName: t('sharedType'),\r\n    field: 'type',\r\n    type: 'string',\r\n    width: theme.dimensions.columnWidthString,\r\n    valueFormatter: ({ value }) => t(prefixString('event', value)),\r\n  }, {\r\n    headerName: t('sharedGeofence'),\r\n    field: 'geofenceId',\r\n    width: theme.dimensions.columnWidthString,\r\n    valueFormatter: ({ value }) => formatGeofence(value),\r\n  }, {\r\n    headerName: t('sharedMaintenance'),\r\n    field: 'maintenanceId',\r\n    type: 'number',\r\n    width: theme.dimensions.columnWidthString,\r\n  }];\r\n\r\n  return (\r\n    <ReportLayout filter={<Filter setItems={setItems} />}>\r\n      <DataGrid\r\n        rows={items}\r\n        columns={columns}\r\n        hideFooter\r\n        autoHeight\r\n      />\r\n    </ReportLayout>\r\n  );\r\n};\r\n\r\nexport default EventReportPage;\r\n"]},"metadata":{},"sourceType":"module"}