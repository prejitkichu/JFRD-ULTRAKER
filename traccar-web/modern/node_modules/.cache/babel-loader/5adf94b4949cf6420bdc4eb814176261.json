{"ast":null,"code":"import { useDispatch, useSelector, connect } from 'react-redux';\nimport { geofencesActions, groupsActions, driversActions, maintenancesActions } from './store';\nimport { useEffectAsync } from './reactHelper';\n\nconst CachingController = () => {\n  const authenticated = useSelector(state => !!state.session.user);\n  const dispatch = useDispatch();\n  useEffectAsync(async () => {\n    if (authenticated) {\n      const response = await fetch('/api/geofences');\n\n      if (response.ok) {\n        dispatch(geofencesActions.update(await response.json()));\n      }\n    }\n  }, [authenticated]);\n  useEffectAsync(async () => {\n    if (authenticated) {\n      const response = await fetch('/api/groups');\n\n      if (response.ok) {\n        dispatch(groupsActions.update(await response.json()));\n      }\n    }\n  }, [authenticated]);\n  useEffectAsync(async () => {\n    if (authenticated) {\n      const response = await fetch('/api/drivers');\n\n      if (response.ok) {\n        dispatch(driversActions.update(await response.json()));\n      }\n    }\n  }, [authenticated]);\n  useEffectAsync(async () => {\n    if (authenticated) {\n      const response = await fetch('/api/maintenance');\n\n      if (response.ok) {\n        dispatch(maintenancesActions.update(await response.json()));\n      }\n    }\n  }, [authenticated]);\n  return null;\n};\n\nexport default connect()(CachingController);","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/CachingController.js"],"names":["useDispatch","useSelector","connect","geofencesActions","groupsActions","driversActions","maintenancesActions","useEffectAsync","CachingController","authenticated","state","session","user","dispatch","response","fetch","ok","update","json"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,EAAmCC,OAAnC,QAAkD,aAAlD;AAEA,SACEC,gBADF,EACoBC,aADpB,EACmCC,cADnC,EACmDC,mBADnD,QAEO,SAFP;AAGA,SAASC,cAAT,QAA+B,eAA/B;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAMC,aAAa,GAAGR,WAAW,CAAES,KAAD,IAAW,CAAC,CAACA,KAAK,CAACC,OAAN,CAAcC,IAA5B,CAAjC;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEAO,EAAAA,cAAc,CAAC,YAAY;AACzB,QAAIE,aAAJ,EAAmB;AACjB,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAD,CAA5B;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACfH,QAAAA,QAAQ,CAACV,gBAAgB,CAACc,MAAjB,CAAwB,MAAMH,QAAQ,CAACI,IAAT,EAA9B,CAAD,CAAR;AACD;AACF;AACF,GAPa,EAOX,CAACT,aAAD,CAPW,CAAd;AASAF,EAAAA,cAAc,CAAC,YAAY;AACzB,QAAIE,aAAJ,EAAmB;AACjB,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,CAA5B;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACfH,QAAAA,QAAQ,CAACT,aAAa,CAACa,MAAd,CAAqB,MAAMH,QAAQ,CAACI,IAAT,EAA3B,CAAD,CAAR;AACD;AACF;AACF,GAPa,EAOX,CAACT,aAAD,CAPW,CAAd;AASAF,EAAAA,cAAc,CAAC,YAAY;AACzB,QAAIE,aAAJ,EAAmB;AACjB,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAD,CAA5B;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACfH,QAAAA,QAAQ,CAACR,cAAc,CAACY,MAAf,CAAsB,MAAMH,QAAQ,CAACI,IAAT,EAA5B,CAAD,CAAR;AACD;AACF;AACF,GAPa,EAOX,CAACT,aAAD,CAPW,CAAd;AASAF,EAAAA,cAAc,CAAC,YAAY;AACzB,QAAIE,aAAJ,EAAmB;AACjB,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAD,CAA5B;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACfH,QAAAA,QAAQ,CAACP,mBAAmB,CAACW,MAApB,CAA2B,MAAMH,QAAQ,CAACI,IAAT,EAAjC,CAAD,CAAR;AACD;AACF;AACF,GAPa,EAOX,CAACT,aAAD,CAPW,CAAd;AASA,SAAO,IAAP;AACD,CAzCD;;AA2CA,eAAeP,OAAO,GAAGM,iBAAH,CAAtB","sourcesContent":["import { useDispatch, useSelector, connect } from 'react-redux';\r\n\r\nimport {\r\n  geofencesActions, groupsActions, driversActions, maintenancesActions,\r\n} from './store';\r\nimport { useEffectAsync } from './reactHelper';\r\n\r\nconst CachingController = () => {\r\n  const authenticated = useSelector((state) => !!state.session.user);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffectAsync(async () => {\r\n    if (authenticated) {\r\n      const response = await fetch('/api/geofences');\r\n      if (response.ok) {\r\n        dispatch(geofencesActions.update(await response.json()));\r\n      }\r\n    }\r\n  }, [authenticated]);\r\n\r\n  useEffectAsync(async () => {\r\n    if (authenticated) {\r\n      const response = await fetch('/api/groups');\r\n      if (response.ok) {\r\n        dispatch(groupsActions.update(await response.json()));\r\n      }\r\n    }\r\n  }, [authenticated]);\r\n\r\n  useEffectAsync(async () => {\r\n    if (authenticated) {\r\n      const response = await fetch('/api/drivers');\r\n      if (response.ok) {\r\n        dispatch(driversActions.update(await response.json()));\r\n      }\r\n    }\r\n  }, [authenticated]);\r\n\r\n  useEffectAsync(async () => {\r\n    if (authenticated) {\r\n      const response = await fetch('/api/maintenance');\r\n      if (response.ok) {\r\n        dispatch(maintenancesActions.update(await response.json()));\r\n      }\r\n    }\r\n  }, [authenticated]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default connect()(CachingController);\r\n"]},"metadata":{},"sourceType":"module"}