{"ast":null,"code":"import { useDispatch, useSelector, connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { positionsActions, devicesActions, sessionActions } from './store';\nimport { useEffectAsync } from './reactHelper';\n\nconst displayNotifications = events => {\n  if ('Notification' in window) {\n    if (Notification.permission === 'granted') {\n      events.forEach(event => {\n        const notification = new Notification(`Event: ${event.type}`);\n        setTimeout(notification.close.bind(notification), 4 * 1000);\n      });\n    } else if (Notification.permission !== 'denied') {\n      Notification.requestPermission(permission => {\n        if (permission === 'granted') {\n          displayNotifications(events);\n        }\n      });\n    }\n  }\n};\n\nconst SocketController = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const authenticated = useSelector(state => !!state.session.user);\n\n  const connectSocket = () => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const socket = new WebSocket(`${protocol}//${window.location.host}/api/socket`);\n\n    socket.onclose = () => {\n      setTimeout(() => connectSocket(), 60 * 1000);\n    };\n\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n\n      if (data.devices) {\n        dispatch(devicesActions.update(data.devices));\n      }\n\n      if (data.positions) {\n        dispatch(positionsActions.update(data.positions));\n      }\n\n      if (data.events) {\n        displayNotifications(data.events);\n      }\n    };\n  };\n\n  useEffectAsync(async () => {\n    const response = await fetch('/api/server');\n\n    if (response.ok) {\n      dispatch(sessionActions.updateServer(await response.json()));\n    }\n  }, []);\n  useEffectAsync(async () => {\n    if (authenticated) {\n      const response = await fetch('/api/devices');\n\n      if (response.ok) {\n        dispatch(devicesActions.refresh(await response.json()));\n      }\n\n      connectSocket();\n    } else {\n      const response = await fetch('/api/session');\n\n      if (response.ok) {\n        dispatch(sessionActions.updateUser(await response.json()));\n      } else {\n        history.push('/login');\n      }\n    }\n  }, [authenticated]);\n  return null;\n};\n\nexport default connect()(SocketController);","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/SocketController.js"],"names":["useDispatch","useSelector","connect","useHistory","positionsActions","devicesActions","sessionActions","useEffectAsync","displayNotifications","events","window","Notification","permission","forEach","event","notification","type","setTimeout","close","bind","requestPermission","SocketController","dispatch","history","authenticated","state","session","user","connectSocket","protocol","location","socket","WebSocket","host","onclose","onmessage","data","JSON","parse","devices","update","positions","response","fetch","ok","updateServer","json","refresh","updateUser","push"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector, connect } from 'react-redux';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { positionsActions, devicesActions, sessionActions } from './store';\r\nimport { useEffectAsync } from './reactHelper';\r\n\r\nconst displayNotifications = (events) => {\r\n  if ('Notification' in window) {\r\n    if (Notification.permission === 'granted') {\r\n      events.forEach((event) => {\r\n        const notification = new Notification(`Event: ${event.type}`);\r\n        setTimeout(notification.close.bind(notification), 4 * 1000);\r\n      });\r\n    } else if (Notification.permission !== 'denied') {\r\n      Notification.requestPermission((permission) => {\r\n        if (permission === 'granted') {\r\n          displayNotifications(events);\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst SocketController = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const authenticated = useSelector((state) => !!state.session.user);\r\n\r\n  const connectSocket = () => {\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const socket = new WebSocket(`${protocol}//${window.location.host}/api/socket`);\r\n\r\n    socket.onclose = () => {\r\n      setTimeout(() => connectSocket(), 60 * 1000);\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      if (data.devices) {\r\n        dispatch(devicesActions.update(data.devices));\r\n      }\r\n      if (data.positions) {\r\n        dispatch(positionsActions.update(data.positions));\r\n      }\r\n      if (data.events) {\r\n        displayNotifications(data.events);\r\n      }\r\n    };\r\n  };\r\n\r\n  useEffectAsync(async () => {\r\n    const response = await fetch('/api/server');\r\n    if (response.ok) {\r\n      dispatch(sessionActions.updateServer(await response.json()));\r\n    }\r\n  }, []);\r\n\r\n  useEffectAsync(async () => {\r\n    if (authenticated) {\r\n      const response = await fetch('/api/devices');\r\n      if (response.ok) {\r\n        dispatch(devicesActions.refresh(await response.json()));\r\n      }\r\n      connectSocket();\r\n    } else {\r\n      const response = await fetch('/api/session');\r\n      if (response.ok) {\r\n        dispatch(sessionActions.updateUser(await response.json()));\r\n      } else {\r\n        history.push('/login');\r\n      }\r\n    }\r\n  }, [authenticated]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default connect()(SocketController);\r\n"]},"metadata":{},"sourceType":"module"}