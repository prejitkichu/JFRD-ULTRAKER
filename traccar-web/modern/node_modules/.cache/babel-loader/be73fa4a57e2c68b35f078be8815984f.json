{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal_Projects\\\\Vehicle Tracking\\\\Development2.0\\\\JFRD-ULTRAKER\\\\traccar-web\\\\modern\\\\src\\\\settings\\\\OptionsLayout\\\\useRoutes.js\";\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport CreateIcon from '@material-ui/icons/Create';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport PersonIcon from '@material-ui/icons/Person';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport BuildIcon from '@material-ui/icons/Build';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport { getIsAdmin, getUserId } from '../../common/selectors';\nimport t from '../../common/localization';\nconst accountRoute = {\n  name: t('settingsUser'),\n  icon: /*#__PURE__*/React.createElement(PersonIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  })\n};\nconst adminRoutes = [{\n  subheader: t('userAdmin')\n}, {\n  name: t('settingsServer'),\n  href: '/admin/server',\n  icon: /*#__PURE__*/React.createElement(StorageIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  })\n}, {\n  name: t('settingsUsers'),\n  href: '/admin/users',\n  icon: /*#__PURE__*/React.createElement(PeopleIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  })\n}, {\n  name: t('statisticsTitle'),\n  href: '/admin/statistics',\n  icon: /*#__PURE__*/React.createElement(BarChartIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  })\n}];\nconst mainRoutes = [accountRoute, {\n  match: 'geofence',\n  name: t('sharedGeofences'),\n  href: '/geofences',\n  icon: /*#__PURE__*/React.createElement(CreateIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  })\n}, {\n  match: 'notification',\n  name: t('sharedNotifications'),\n  href: '/settings/notifications',\n  icon: /*#__PURE__*/React.createElement(NotificationsIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  })\n}, {\n  match: 'group',\n  name: t('settingsGroups'),\n  href: '/settings/groups',\n  icon: /*#__PURE__*/React.createElement(FolderIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  })\n}, {\n  match: 'driver',\n  name: t('sharedDrivers'),\n  href: '/settings/drivers',\n  icon: /*#__PURE__*/React.createElement(PersonIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })\n}, {\n  match: 'attribute',\n  name: t('sharedComputedAttributes'),\n  href: '/settings/attributes',\n  icon: /*#__PURE__*/React.createElement(StorageIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  })\n}, {\n  match: 'maintenance',\n  name: t('sharedMaintenance'),\n  href: '/settings/maintenances',\n  icon: /*#__PURE__*/React.createElement(BuildIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })\n}];\nexport default (() => {\n  const isAdmin = useSelector(getIsAdmin);\n  const userId = useSelector(getUserId);\n  accountRoute.href = `/user/${userId}`;\n  return useMemo(() => [...mainRoutes, ...(isAdmin ? adminRoutes : [])], [isAdmin]);\n});","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/settings/OptionsLayout/useRoutes.js"],"names":["React","useMemo","useSelector","CreateIcon","NotificationsIcon","FolderIcon","PersonIcon","StorageIcon","BuildIcon","PeopleIcon","BarChartIcon","getIsAdmin","getUserId","t","accountRoute","name","icon","adminRoutes","subheader","href","mainRoutes","match","isAdmin","userId"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\nimport BuildIcon from '@material-ui/icons/Build';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport { getIsAdmin, getUserId } from '../../common/selectors';\r\nimport t from '../../common/localization';\r\n\r\nconst accountRoute = {\r\n  name: t('settingsUser'),\r\n  icon: <PersonIcon />,\r\n};\r\n\r\nconst adminRoutes = [\r\n  { subheader: t('userAdmin') },\r\n  {\r\n    name: t('settingsServer'),\r\n    href: '/admin/server',\r\n    icon: <StorageIcon />,\r\n  },\r\n  {\r\n    name: t('settingsUsers'),\r\n    href: '/admin/users',\r\n    icon: <PeopleIcon />,\r\n  },\r\n  {\r\n    name: t('statisticsTitle'),\r\n    href: '/admin/statistics',\r\n    icon: <BarChartIcon />,\r\n  },\r\n];\r\n\r\nconst mainRoutes = [\r\n  accountRoute,\r\n  {\r\n    match: 'geofence',\r\n    name: t('sharedGeofences'),\r\n    href: '/geofences',\r\n    icon: <CreateIcon />,\r\n  },\r\n  {\r\n    match: 'notification',\r\n    name: t('sharedNotifications'),\r\n    href: '/settings/notifications',\r\n    icon: <NotificationsIcon />,\r\n  },\r\n  {\r\n    match: 'group',\r\n    name: t('settingsGroups'),\r\n    href: '/settings/groups',\r\n    icon: <FolderIcon />,\r\n  },\r\n  {\r\n    match: 'driver',\r\n    name: t('sharedDrivers'),\r\n    href: '/settings/drivers',\r\n    icon: <PersonIcon />,\r\n  },\r\n  {\r\n    match: 'attribute',\r\n    name: t('sharedComputedAttributes'),\r\n    href: '/settings/attributes',\r\n    icon: <StorageIcon />,\r\n  },\r\n  {\r\n    match: 'maintenance',\r\n    name: t('sharedMaintenance'),\r\n    href: '/settings/maintenances',\r\n    icon: <BuildIcon />,\r\n  },\r\n];\r\n\r\nexport default () => {\r\n  const isAdmin = useSelector(getIsAdmin);\r\n  const userId = useSelector(getUserId);\r\n  accountRoute.href = `/user/${userId}`;\r\n\r\n  return useMemo(() => [...mainRoutes, ...(isAdmin ? adminRoutes : [])], [\r\n    isAdmin,\r\n  ]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}