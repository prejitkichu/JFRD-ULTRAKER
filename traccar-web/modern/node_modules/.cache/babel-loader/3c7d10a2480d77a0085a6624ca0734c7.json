{"ast":null,"code":"/**\n * @module createCanvasContext\n */\nconst contextTypeList = [\"2d\", \"webgl\", \"experimental-webgl\", \"webgl2\", \"webgl2-compute\", \"bitmaprenderer\", \"gpupresent\"];\n/**\n * Create a RenderingContext (2d, webgl, webgl2, bitmaprenderer, gpupresent), optionally offscreen for possible use in a Worker.\n *\n * @alias module:createCanvasContext\n * @param {import(\"./types.js\").ContextType} [contextType=\"2d\"]\n * @param {import(\"./types.js\").CanvasContextOptions} [options={}]\n * @returns {import(\"./types.js\").CanvasContextReturnValue}\n */\n\nfunction createCanvasContext() {\n  let contextType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"2d\";\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Get options and set defaults\n  const {\n    width,\n    height,\n    offscreen = false,\n    worker = false,\n    contextAttributes = {}\n  } = { ...options\n  }; // Check contextType is valid\n\n  if (!worker && !contextTypeList.includes(contextType)) {\n    throw new TypeError(`Unknown contextType: \"${contextType}\"`);\n  } // Return in Node or in a Worker unless a canvas is provided\n  // See https://github.com/Automattic/node-canvas for an example\n\n\n  if (typeof window === \"undefined\" && !options.canvas) {\n    return null;\n  } // Get offscreen canvas if requested and available\n\n\n  const canvasEl = options.canvas || document.createElement(\"canvas\");\n  const canvas = (offscreen || worker) && \"OffscreenCanvas\" in window ? canvasEl.transferControlToOffscreen() : canvasEl; // Set canvas dimensions (default to 300 in browsers)\n\n  if (Number.isInteger(width) && width >= 0) canvas.width = width;\n  if (Number.isInteger(height) && height >= 0) canvas.height = height;\n  if (worker) return {\n    canvas\n  }; // Get the context with specified attributes and handle experimental-webgl\n\n  let context;\n\n  try {\n    context = canvas.getContext(contextType, contextAttributes) || (contextType === \"webgl\" ? canvas.getContext(\"experimental-webgl\", contextAttributes) : null);\n  } catch (error) {\n    context = null;\n  }\n\n  return {\n    canvas,\n    context\n  };\n}\n\nexport default createCanvasContext;","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/node_modules/canvas-context/index.js"],"names":["contextTypeList","createCanvasContext","contextType","options","width","height","offscreen","worker","contextAttributes","includes","TypeError","window","canvas","canvasEl","document","createElement","transferControlToOffscreen","Number","isInteger","context","getContext","error"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,eAAe,GAAG,CACtB,IADsB,EAEtB,OAFsB,EAGtB,oBAHsB,EAItB,QAJsB,EAKtB,gBALsB,EAMtB,gBANsB,EAOtB,YAPsB,CAAxB;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,GAA+D;AAAA,MAAlCC,WAAkC,uEAApB,IAAoB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC7D;AACA,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,SAAS,GAAG,KAHR;AAIJC,IAAAA,MAAM,GAAG,KAJL;AAKJC,IAAAA,iBAAiB,GAAG;AALhB,MAMF,EACF,GAAGL;AADD,GANJ,CAF6D,CAY7D;;AACA,MAAI,CAACI,MAAD,IAAW,CAACP,eAAe,CAACS,QAAhB,CAAyBP,WAAzB,CAAhB,EAAuD;AACrD,UAAM,IAAIQ,SAAJ,CAAe,yBAAwBR,WAAY,GAAnD,CAAN;AACD,GAf4D,CAiB7D;AACA;;;AACA,MAAI,OAAOS,MAAP,KAAkB,WAAlB,IAAiC,CAACR,OAAO,CAACS,MAA9C,EAAsD;AACpD,WAAO,IAAP;AACD,GArB4D,CAuB7D;;;AACA,QAAMC,QAAQ,GAAGV,OAAO,CAACS,MAAR,IAAkBE,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAnC;AACA,QAAMH,MAAM,GACV,CAACN,SAAS,IAAIC,MAAd,KAAyB,qBAAqBI,MAA9C,GACIE,QAAQ,CAACG,0BAAT,EADJ,GAEIH,QAHN,CAzB6D,CA8B7D;;AACA,MAAII,MAAM,CAACC,SAAP,CAAiBd,KAAjB,KAA2BA,KAAK,IAAI,CAAxC,EAA2CQ,MAAM,CAACR,KAAP,GAAeA,KAAf;AAC3C,MAAIa,MAAM,CAACC,SAAP,CAAiBb,MAAjB,KAA4BA,MAAM,IAAI,CAA1C,EAA6CO,MAAM,CAACP,MAAP,GAAgBA,MAAhB;AAE7C,MAAIE,MAAJ,EAAY,OAAO;AAAEK,IAAAA;AAAF,GAAP,CAlCiD,CAoC7D;;AACA,MAAIO,OAAJ;;AACA,MAAI;AACFA,IAAAA,OAAO,GACLP,MAAM,CAACQ,UAAP,CAAkBlB,WAAlB,EAA+BM,iBAA/B,MACCN,WAAW,KAAK,OAAhB,GACGU,MAAM,CAACQ,UAAP,CAAkB,oBAAlB,EAAwCZ,iBAAxC,CADH,GAEG,IAHJ,CADF;AAKD,GAND,CAME,OAAOa,KAAP,EAAc;AACdF,IAAAA,OAAO,GAAG,IAAV;AACD;;AAED,SAAO;AACLP,IAAAA,MADK;AAELO,IAAAA;AAFK,GAAP;AAID;;AAED,eAAelB,mBAAf","sourcesContent":["/**\n * @module createCanvasContext\n */\n\nconst contextTypeList = [\n  \"2d\",\n  \"webgl\",\n  \"experimental-webgl\",\n  \"webgl2\",\n  \"webgl2-compute\",\n  \"bitmaprenderer\",\n  \"gpupresent\",\n];\n\n/**\n * Create a RenderingContext (2d, webgl, webgl2, bitmaprenderer, gpupresent), optionally offscreen for possible use in a Worker.\n *\n * @alias module:createCanvasContext\n * @param {import(\"./types.js\").ContextType} [contextType=\"2d\"]\n * @param {import(\"./types.js\").CanvasContextOptions} [options={}]\n * @returns {import(\"./types.js\").CanvasContextReturnValue}\n */\nfunction createCanvasContext(contextType = \"2d\", options = {}) {\n  // Get options and set defaults\n  const {\n    width,\n    height,\n    offscreen = false,\n    worker = false,\n    contextAttributes = {},\n  } = {\n    ...options,\n  };\n\n  // Check contextType is valid\n  if (!worker && !contextTypeList.includes(contextType)) {\n    throw new TypeError(`Unknown contextType: \"${contextType}\"`);\n  }\n\n  // Return in Node or in a Worker unless a canvas is provided\n  // See https://github.com/Automattic/node-canvas for an example\n  if (typeof window === \"undefined\" && !options.canvas) {\n    return null;\n  }\n\n  // Get offscreen canvas if requested and available\n  const canvasEl = options.canvas || document.createElement(\"canvas\");\n  const canvas =\n    (offscreen || worker) && \"OffscreenCanvas\" in window\n      ? canvasEl.transferControlToOffscreen()\n      : canvasEl;\n\n  // Set canvas dimensions (default to 300 in browsers)\n  if (Number.isInteger(width) && width >= 0) canvas.width = width;\n  if (Number.isInteger(height) && height >= 0) canvas.height = height;\n\n  if (worker) return { canvas };\n\n  // Get the context with specified attributes and handle experimental-webgl\n  let context;\n  try {\n    context =\n      canvas.getContext(contextType, contextAttributes) ||\n      (contextType === \"webgl\"\n        ? canvas.getContext(\"experimental-webgl\", contextAttributes)\n        : null);\n  } catch (error) {\n    context = null;\n  }\n\n  return {\n    canvas,\n    context,\n  };\n}\n\nexport default createCanvasContext;\n"]},"metadata":{},"sourceType":"module"}