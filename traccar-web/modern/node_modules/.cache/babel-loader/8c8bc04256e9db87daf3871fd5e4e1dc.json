{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal_Projects\\\\Vehicle Tracking\\\\Development2.0\\\\JFRD-ULTRAKER\\\\traccar-web\\\\modern\\\\src\\\\reports\\\\RouteReportPage.js\";\nimport React, { useState } from 'react';\nimport { Paper } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { useTheme } from '@material-ui/core/styles';\nimport { formatDistance, formatSpeed, formatBoolean, formatDate, formatCoordinate } from '../common/formatter';\nimport ReportFilter from './ReportFilter';\nimport ReportLayout from './ReportLayout';\nimport { useAttributePreference, usePreference } from '../common/preferences';\nimport t from '../common/localization';\n\nconst Filter = _ref => {\n  let {\n    setItems\n  } = _ref;\n\n  const handleSubmit = async (deviceId, from, to, mail, headers) => {\n    const query = new URLSearchParams({\n      deviceId,\n      from,\n      to,\n      mail\n    });\n    const response = await fetch(`/api/reports/route?${query.toString()}`, {\n      headers\n    });\n\n    if (response.ok) {\n      const contentType = response.headers.get('content-type');\n\n      if (contentType) {\n        if (contentType === 'application/json') {\n          setItems(await response.json());\n        } else {\n          window.location.assign(window.URL.createObjectURL(await response.blob()));\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ReportFilter, {\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 10\n    }\n  });\n};\n\nconst RouteReportPage = () => {\n  const distanceUnit = useAttributePreference('distanceUnit');\n  const speedUnit = useAttributePreference('speedUnit');\n  const coordinateFormat = usePreference('coordinateFormat');\n  const theme = useTheme();\n  const columns = [{\n    headerName: t('positionFixTime'),\n    field: 'fixTime',\n    type: 'dateTime',\n    width: theme.dimensions.columnWidthDate,\n    valueFormatter: _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return formatDate(value);\n    }\n  }, {\n    headerName: t('positionLatitude'),\n    field: 'latitude',\n    type: 'number',\n    width: theme.dimensions.columnWidthNumber,\n    valueFormatter: _ref3 => {\n      let {\n        value\n      } = _ref3;\n      return formatCoordinate('latitude', value, coordinateFormat);\n    }\n  }, {\n    headerName: t('positionLongitude'),\n    field: 'longitude',\n    type: 'number',\n    width: theme.dimensions.columnWidthNumber,\n    valueFormatter: _ref4 => {\n      let {\n        value\n      } = _ref4;\n      return formatCoordinate('longitude', value, coordinateFormat);\n    }\n  }, {\n    headerName: t('positionSpeed'),\n    field: 'speed',\n    type: 'number',\n    width: theme.dimensions.columnWidthString,\n    valueFormatter: _ref5 => {\n      let {\n        value\n      } = _ref5;\n      return formatSpeed(value, speedUnit);\n    }\n  }, {\n    headerName: t('positionAddress'),\n    field: 'address',\n    type: 'string',\n    width: theme.dimensions.columnWidthString\n  }, {\n    headerName: t('positionIgnition'),\n    field: 'ignition',\n    type: 'boolean',\n    width: theme.dimensions.columnWidthBoolean,\n    valueGetter: _ref6 => {\n      let {\n        row\n      } = _ref6;\n      return row.attributes.ignition;\n    },\n    valueFormatter: _ref7 => {\n      let {\n        value\n      } = _ref7;\n      return formatBoolean(value);\n    }\n  }, {\n    headerName: t('deviceTotalDistance'),\n    field: 'totalDistance',\n    type: 'number',\n    hide: true,\n    width: theme.dimensions.columnWidthNumber,\n    valueGetter: _ref8 => {\n      let {\n        row\n      } = _ref8;\n      return row.attributes.totalDistance;\n    },\n    valueFormatter: _ref9 => {\n      let {\n        value\n      } = _ref9;\n      return formatDistance(value, distanceUnit);\n    }\n  }];\n  const [items, setItems] = useState([]);\n  return /*#__PURE__*/React.createElement(ReportLayout, {\n    filter: /*#__PURE__*/React.createElement(Filter, {\n      setItems: setItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 27\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: items,\n    columns: columns,\n    hideFooter: true,\n    autoHeight: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default RouteReportPage;","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/reports/RouteReportPage.js"],"names":["React","useState","Paper","DataGrid","useTheme","formatDistance","formatSpeed","formatBoolean","formatDate","formatCoordinate","ReportFilter","ReportLayout","useAttributePreference","usePreference","t","Filter","setItems","handleSubmit","deviceId","from","to","mail","headers","query","URLSearchParams","response","fetch","toString","ok","contentType","get","json","window","location","assign","URL","createObjectURL","blob","RouteReportPage","distanceUnit","speedUnit","coordinateFormat","theme","columns","headerName","field","type","width","dimensions","columnWidthDate","valueFormatter","value","columnWidthNumber","columnWidthString","columnWidthBoolean","valueGetter","row","attributes","ignition","hide","totalDistance","items"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Paper } from '@material-ui/core';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport {\r\n  formatDistance, formatSpeed, formatBoolean, formatDate, formatCoordinate,\r\n} from '../common/formatter';\r\nimport ReportFilter from './ReportFilter';\r\nimport ReportLayout from './ReportLayout';\r\nimport { useAttributePreference, usePreference } from '../common/preferences';\r\nimport t from '../common/localization';\r\n\r\nconst Filter = ({ setItems }) => {\r\n  const handleSubmit = async (deviceId, from, to, mail, headers) => {\r\n    const query = new URLSearchParams({\r\n      deviceId, from, to, mail,\r\n    });\r\n    const response = await fetch(`/api/reports/route?${query.toString()}`, { headers });\r\n    if (response.ok) {\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType) {\r\n        if (contentType === 'application/json') {\r\n          setItems(await response.json());\r\n        } else {\r\n          window.location.assign(window.URL.createObjectURL(await response.blob()));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return <ReportFilter handleSubmit={handleSubmit} />;\r\n};\r\n\r\nconst RouteReportPage = () => {\r\n  const distanceUnit = useAttributePreference('distanceUnit');\r\n  const speedUnit = useAttributePreference('speedUnit');\r\n  const coordinateFormat = usePreference('coordinateFormat');\r\n  const theme = useTheme();\r\n\r\n  const columns = [{\r\n    headerName: t('positionFixTime'),\r\n    field: 'fixTime',\r\n    type: 'dateTime',\r\n    width: theme.dimensions.columnWidthDate,\r\n    valueFormatter: ({ value }) => formatDate(value),\r\n  }, {\r\n    headerName: t('positionLatitude'),\r\n    field: 'latitude',\r\n    type: 'number',\r\n    width: theme.dimensions.columnWidthNumber,\r\n    valueFormatter: ({ value }) => formatCoordinate('latitude', value, coordinateFormat),\r\n  }, {\r\n    headerName: t('positionLongitude'),\r\n    field: 'longitude',\r\n    type: 'number',\r\n    width: theme.dimensions.columnWidthNumber,\r\n    valueFormatter: ({ value }) => formatCoordinate('longitude', value, coordinateFormat),\r\n  }, {\r\n    headerName: t('positionSpeed'),\r\n    field: 'speed',\r\n    type: 'number',\r\n    width: theme.dimensions.columnWidthString,\r\n    valueFormatter: ({ value }) => formatSpeed(value, speedUnit),\r\n  }, {\r\n    headerName: t('positionAddress'),\r\n    field: 'address',\r\n    type: 'string',\r\n    width: theme.dimensions.columnWidthString,\r\n  }, {\r\n    headerName: t('positionIgnition'),\r\n    field: 'ignition',\r\n    type: 'boolean',\r\n    width: theme.dimensions.columnWidthBoolean,\r\n    valueGetter: ({ row }) => row.attributes.ignition,\r\n    valueFormatter: ({ value }) => formatBoolean(value),\r\n  }, {\r\n    headerName: t('deviceTotalDistance'),\r\n    field: 'totalDistance',\r\n    type: 'number',\r\n    hide: true,\r\n    width: theme.dimensions.columnWidthNumber,\r\n    valueGetter: ({ row }) => row.attributes.totalDistance,\r\n    valueFormatter: ({ value }) => formatDistance(value, distanceUnit),\r\n  }];\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  return (\r\n    <ReportLayout filter={<Filter setItems={setItems} />}>\r\n      <Paper>\r\n        <DataGrid\r\n          rows={items}\r\n          columns={columns}\r\n          hideFooter\r\n          autoHeight\r\n        />\r\n      </Paper>\r\n    </ReportLayout>\r\n  );\r\n};\r\n\r\nexport default RouteReportPage;\r\n"]},"metadata":{},"sourceType":"module"}