{"ast":null,"code":"import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { map } from './Map';\nimport { geofenceToFeature } from './mapUtil';\n\nconst GeofenceMap = () => {\n  const id = 'geofences';\n  const geofences = useSelector(state => Object.values(state.geofences.items));\n  useEffect(() => {\n    map.addSource(id, {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: []\n      }\n    });\n    map.addLayer({\n      source: id,\n      id: 'geofences-fill',\n      type: 'fill',\n      filter: ['all', ['==', '$type', 'Polygon']],\n      paint: {\n        'fill-color': '#3bb2d0',\n        'fill-outline-color': '#3bb2d0',\n        'fill-opacity': 0.1\n      }\n    });\n    map.addLayer({\n      source: id,\n      id: 'geofences-line',\n      type: 'line',\n      paint: {\n        'line-color': '#3bb2d0',\n        'line-width': 2\n      }\n    });\n    map.addLayer({\n      source: id,\n      id: 'geofences-title',\n      type: 'symbol',\n      layout: {\n        'text-field': '{name}',\n        'text-font': ['Roboto Regular'],\n        'text-size': 12\n      },\n      paint: {\n        'text-halo-color': 'white',\n        'text-halo-width': 1\n      }\n    });\n    return () => {\n      map.removeLayer('geofences-fill');\n      map.removeLayer('geofences-line');\n      map.removeLayer('geofences-title');\n      map.removeSource(id);\n    };\n  }, []);\n  useEffect(() => {\n    map.getSource(id).setData({\n      type: 'FeatureCollection',\n      features: geofences.map(geofenceToFeature)\n    });\n  }, [geofences]);\n  return null;\n};\n\nexport default GeofenceMap;","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/map/GeofenceMap.js"],"names":["useEffect","useSelector","map","geofenceToFeature","GeofenceMap","id","geofences","state","Object","values","items","addSource","type","data","features","addLayer","source","filter","paint","layout","removeLayer","removeSource","getSource","setData"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,iBAAT,QAAkC,WAAlC;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,EAAE,GAAG,WAAX;AAEA,QAAMC,SAAS,GAAGL,WAAW,CAAEM,KAAD,IAAWC,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACD,SAAN,CAAgBI,KAA9B,CAAZ,CAA7B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,GAAG,CAACS,SAAJ,CAAcN,EAAd,EAAkB;AAChBO,MAAAA,IAAI,EAAE,SADU;AAEhBC,MAAAA,IAAI,EAAE;AACJD,QAAAA,IAAI,EAAE,mBADF;AAEJE,QAAAA,QAAQ,EAAE;AAFN;AAFU,KAAlB;AAOAZ,IAAAA,GAAG,CAACa,QAAJ,CAAa;AACXC,MAAAA,MAAM,EAAEX,EADG;AAEXA,MAAAA,EAAE,EAAE,gBAFO;AAGXO,MAAAA,IAAI,EAAE,MAHK;AAIXK,MAAAA,MAAM,EAAE,CACN,KADM,EAEN,CAAC,IAAD,EAAO,OAAP,EAAgB,SAAhB,CAFM,CAJG;AAQXC,MAAAA,KAAK,EAAE;AACL,sBAAc,SADT;AAEL,8BAAsB,SAFjB;AAGL,wBAAgB;AAHX;AARI,KAAb;AAcAhB,IAAAA,GAAG,CAACa,QAAJ,CAAa;AACXC,MAAAA,MAAM,EAAEX,EADG;AAEXA,MAAAA,EAAE,EAAE,gBAFO;AAGXO,MAAAA,IAAI,EAAE,MAHK;AAIXM,MAAAA,KAAK,EAAE;AACL,sBAAc,SADT;AAEL,sBAAc;AAFT;AAJI,KAAb;AASAhB,IAAAA,GAAG,CAACa,QAAJ,CAAa;AACXC,MAAAA,MAAM,EAAEX,EADG;AAEXA,MAAAA,EAAE,EAAE,iBAFO;AAGXO,MAAAA,IAAI,EAAE,QAHK;AAIXO,MAAAA,MAAM,EAAE;AACN,sBAAc,QADR;AAEN,qBAAa,CAAC,gBAAD,CAFP;AAGN,qBAAa;AAHP,OAJG;AASXD,MAAAA,KAAK,EAAE;AACL,2BAAmB,OADd;AAEL,2BAAmB;AAFd;AATI,KAAb;AAeA,WAAO,MAAM;AACXhB,MAAAA,GAAG,CAACkB,WAAJ,CAAgB,gBAAhB;AACAlB,MAAAA,GAAG,CAACkB,WAAJ,CAAgB,gBAAhB;AACAlB,MAAAA,GAAG,CAACkB,WAAJ,CAAgB,iBAAhB;AACAlB,MAAAA,GAAG,CAACmB,YAAJ,CAAiBhB,EAAjB;AACD,KALD;AAMD,GApDQ,EAoDN,EApDM,CAAT;AAsDAL,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,GAAG,CAACoB,SAAJ,CAAcjB,EAAd,EAAkBkB,OAAlB,CAA0B;AACxBX,MAAAA,IAAI,EAAE,mBADkB;AAExBE,MAAAA,QAAQ,EAAER,SAAS,CAACJ,GAAV,CAAcC,iBAAd;AAFc,KAA1B;AAID,GALQ,EAKN,CAACG,SAAD,CALM,CAAT;AAOA,SAAO,IAAP;AACD,CAnED;;AAqEA,eAAeF,WAAf","sourcesContent":["import { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { map } from './Map';\r\nimport { geofenceToFeature } from './mapUtil';\r\n\r\nconst GeofenceMap = () => {\r\n  const id = 'geofences';\r\n\r\n  const geofences = useSelector((state) => Object.values(state.geofences.items));\r\n\r\n  useEffect(() => {\r\n    map.addSource(id, {\r\n      type: 'geojson',\r\n      data: {\r\n        type: 'FeatureCollection',\r\n        features: [],\r\n      },\r\n    });\r\n    map.addLayer({\r\n      source: id,\r\n      id: 'geofences-fill',\r\n      type: 'fill',\r\n      filter: [\r\n        'all',\r\n        ['==', '$type', 'Polygon'],\r\n      ],\r\n      paint: {\r\n        'fill-color': '#3bb2d0',\r\n        'fill-outline-color': '#3bb2d0',\r\n        'fill-opacity': 0.1,\r\n      },\r\n    });\r\n    map.addLayer({\r\n      source: id,\r\n      id: 'geofences-line',\r\n      type: 'line',\r\n      paint: {\r\n        'line-color': '#3bb2d0',\r\n        'line-width': 2,\r\n      },\r\n    });\r\n    map.addLayer({\r\n      source: id,\r\n      id: 'geofences-title',\r\n      type: 'symbol',\r\n      layout: {\r\n        'text-field': '{name}',\r\n        'text-font': ['Roboto Regular'],\r\n        'text-size': 12,\r\n      },\r\n      paint: {\r\n        'text-halo-color': 'white',\r\n        'text-halo-width': 1,\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      map.removeLayer('geofences-fill');\r\n      map.removeLayer('geofences-line');\r\n      map.removeLayer('geofences-title');\r\n      map.removeSource(id);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    map.getSource(id).setData({\r\n      type: 'FeatureCollection',\r\n      features: geofences.map(geofenceToFeature),\r\n    });\r\n  }, [geofences]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default GeofenceMap;\r\n"]},"metadata":{},"sourceType":"module"}