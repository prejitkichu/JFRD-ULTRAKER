{"ast":null,"code":"import maplibregl from 'maplibre-gl';\nimport { useEffect } from 'react';\nimport { map } from './Map';\n\nconst ReplayPathMap = _ref => {\n  let {\n    positions\n  } = _ref;\n  const id = 'replay';\n  useEffect(() => {\n    map.addSource(id, {\n      type: 'geojson',\n      data: {\n        type: 'Feature',\n        geometry: {\n          type: 'LineString',\n          coordinates: []\n        }\n      }\n    });\n    map.addLayer({\n      source: id,\n      id,\n      type: 'line',\n      layout: {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      paint: {\n        'line-color': '#333',\n        'line-width': 5\n      }\n    });\n    return () => {\n      map.removeLayer(id);\n      map.removeSource(id);\n    };\n  }, []);\n  useEffect(() => {\n    const coordinates = positions.map(item => [item.longitude, item.latitude]);\n    map.getSource(id).setData({\n      type: 'Feature',\n      geometry: {\n        type: 'LineString',\n        coordinates\n      }\n    });\n\n    if (coordinates.length) {\n      const bounds = coordinates.reduce((bounds, item) => bounds.extend(item), new maplibregl.LngLatBounds(coordinates[0], coordinates[0]));\n      map.fitBounds(bounds, {\n        padding: {\n          top: 50,\n          bottom: 250,\n          left: 25,\n          right: 25\n        }\n      });\n    }\n  }, [positions]);\n  return null;\n};\n\nexport default ReplayPathMap;","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/map/ReplayPathMap.js"],"names":["maplibregl","useEffect","map","ReplayPathMap","positions","id","addSource","type","data","geometry","coordinates","addLayer","source","layout","paint","removeLayer","removeSource","item","longitude","latitude","getSource","setData","length","bounds","reduce","extend","LngLatBounds","fitBounds","padding","top","bottom","left","right"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,GAAT,QAAoB,OAApB;;AAEA,MAAMC,aAAa,GAAG,QAAmB;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AACvC,QAAMC,EAAE,GAAG,QAAX;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,GAAG,CAACI,SAAJ,CAAcD,EAAd,EAAkB;AAChBE,MAAAA,IAAI,EAAE,SADU;AAEhBC,MAAAA,IAAI,EAAE;AACJD,QAAAA,IAAI,EAAE,SADF;AAEJE,QAAAA,QAAQ,EAAE;AACRF,UAAAA,IAAI,EAAE,YADE;AAERG,UAAAA,WAAW,EAAE;AAFL;AAFN;AAFU,KAAlB;AAUAR,IAAAA,GAAG,CAACS,QAAJ,CAAa;AACXC,MAAAA,MAAM,EAAEP,EADG;AAEXA,MAAAA,EAFW;AAGXE,MAAAA,IAAI,EAAE,MAHK;AAIXM,MAAAA,MAAM,EAAE;AACN,qBAAa,OADP;AAEN,oBAAY;AAFN,OAJG;AAQXC,MAAAA,KAAK,EAAE;AACL,sBAAc,MADT;AAEL,sBAAc;AAFT;AARI,KAAb;AAcA,WAAO,MAAM;AACXZ,MAAAA,GAAG,CAACa,WAAJ,CAAgBV,EAAhB;AACAH,MAAAA,GAAG,CAACc,YAAJ,CAAiBX,EAAjB;AACD,KAHD;AAID,GA7BQ,EA6BN,EA7BM,CAAT;AA+BAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,WAAW,GAAGN,SAAS,CAACF,GAAV,CAAee,IAAD,IAAU,CAACA,IAAI,CAACC,SAAN,EAAiBD,IAAI,CAACE,QAAtB,CAAxB,CAApB;AACAjB,IAAAA,GAAG,CAACkB,SAAJ,CAAcf,EAAd,EAAkBgB,OAAlB,CAA0B;AACxBd,MAAAA,IAAI,EAAE,SADkB;AAExBE,MAAAA,QAAQ,EAAE;AACRF,QAAAA,IAAI,EAAE,YADE;AAERG,QAAAA;AAFQ;AAFc,KAA1B;;AAOA,QAAIA,WAAW,CAACY,MAAhB,EAAwB;AACtB,YAAMC,MAAM,GAAGb,WAAW,CAACc,MAAZ,CAAmB,CAACD,MAAD,EAASN,IAAT,KAAkBM,MAAM,CAACE,MAAP,CAAcR,IAAd,CAArC,EAA0D,IAAIjB,UAAU,CAAC0B,YAAf,CAA4BhB,WAAW,CAAC,CAAD,CAAvC,EAA4CA,WAAW,CAAC,CAAD,CAAvD,CAA1D,CAAf;AACAR,MAAAA,GAAG,CAACyB,SAAJ,CAAcJ,MAAd,EAAsB;AACpBK,QAAAA,OAAO,EAAE;AACPC,UAAAA,GAAG,EAAE,EADE;AACEC,UAAAA,MAAM,EAAE,GADV;AACeC,UAAAA,IAAI,EAAE,EADrB;AACyBC,UAAAA,KAAK,EAAE;AADhC;AADW,OAAtB;AAKD;AACF,GAjBQ,EAiBN,CAAC5B,SAAD,CAjBM,CAAT;AAmBA,SAAO,IAAP;AACD,CAtDD;;AAwDA,eAAeD,aAAf","sourcesContent":["import maplibregl from 'maplibre-gl';\r\nimport { useEffect } from 'react';\r\nimport { map } from './Map';\r\n\r\nconst ReplayPathMap = ({ positions }) => {\r\n  const id = 'replay';\r\n\r\n  useEffect(() => {\r\n    map.addSource(id, {\r\n      type: 'geojson',\r\n      data: {\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'LineString',\r\n          coordinates: [],\r\n        },\r\n      },\r\n    });\r\n    map.addLayer({\r\n      source: id,\r\n      id,\r\n      type: 'line',\r\n      layout: {\r\n        'line-join': 'round',\r\n        'line-cap': 'round',\r\n      },\r\n      paint: {\r\n        'line-color': '#333',\r\n        'line-width': 5,\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      map.removeLayer(id);\r\n      map.removeSource(id);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const coordinates = positions.map((item) => [item.longitude, item.latitude]);\r\n    map.getSource(id).setData({\r\n      type: 'Feature',\r\n      geometry: {\r\n        type: 'LineString',\r\n        coordinates,\r\n      },\r\n    });\r\n    if (coordinates.length) {\r\n      const bounds = coordinates.reduce((bounds, item) => bounds.extend(item), new maplibregl.LngLatBounds(coordinates[0], coordinates[0]));\r\n      map.fitBounds(bounds, {\r\n        padding: {\r\n          top: 50, bottom: 250, left: 25, right: 25,\r\n        },\r\n      });\r\n    }\r\n  }, [positions]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ReplayPathMap;\r\n"]},"metadata":{},"sourceType":"module"}