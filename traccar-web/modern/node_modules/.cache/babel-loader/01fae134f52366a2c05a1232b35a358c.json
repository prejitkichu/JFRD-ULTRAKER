{"ast":null,"code":"import 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport theme from '@mapbox/mapbox-gl-draw/src/lib/theme';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { map } from './Map';\nimport { geofenceToFeature, geometryToArea } from './mapUtil';\nimport { geofencesActions } from '../store';\nconst draw = new MapboxDraw({\n  displayControlsDefault: false,\n  controls: {\n    polygon: true,\n    trash: true\n  },\n  userProperties: true,\n  styles: [...theme, {\n    id: 'gl-draw-title',\n    type: 'symbol',\n    filter: ['all'],\n    layout: {\n      'text-field': '{user_name}',\n      'text-font': ['Roboto Regular'],\n      'text-size': 12\n    },\n    paint: {\n      'text-halo-color': 'white',\n      'text-halo-width': 1\n    }\n  }]\n});\n\nconst GeofenceEditMap = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const geofences = useSelector(state => Object.values(state.geofences.items));\n\n  const refreshGeofences = async () => {\n    const response = await fetch('/api/geofences');\n\n    if (response.ok) {\n      dispatch(geofencesActions.refresh(await response.json()));\n    }\n  };\n\n  useEffect(() => {\n    refreshGeofences();\n    map.addControl(draw, 'top-left');\n    map.on('draw.create', async event => {\n      const feature = event.features[0];\n      const newItem = {\n        name: '',\n        area: geometryToArea(feature.geometry)\n      };\n      draw.delete(feature.id);\n      const response = await fetch('/api/geofences', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newItem)\n      });\n\n      if (response.ok) {\n        const item = await response.json();\n        history.push(`/geofence/${item.id}`);\n      }\n    });\n    map.on('draw.delete', async event => {\n      const feature = event.features[0];\n      const response = await fetch(`/api/geofences/${feature.id}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        refreshGeofences();\n      }\n    });\n    map.on('draw.update', async event => {\n      const feature = event.features[0];\n      const item = geofences.find(i => i.id === feature.id);\n\n      if (item) {\n        const updatedItem = { ...item,\n          area: geometryToArea(feature.geometry)\n        };\n        const response = await fetch(`/api/geofences/${feature.id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedItem)\n        });\n\n        if (response.ok) {\n          refreshGeofences();\n        }\n      }\n    });\n    return () => map.removeControl(draw);\n  }, []);\n  useEffect(() => {\n    draw.deleteAll();\n    geofences.forEach(geofence => {\n      draw.add(geofenceToFeature(geofence));\n    });\n  }, [geofences]);\n  return null;\n};\n\nexport default GeofenceEditMap;","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/map/GeofenceEditMap.js"],"names":["MapboxDraw","theme","useEffect","useDispatch","useSelector","useHistory","map","geofenceToFeature","geometryToArea","geofencesActions","draw","displayControlsDefault","controls","polygon","trash","userProperties","styles","id","type","filter","layout","paint","GeofenceEditMap","dispatch","history","geofences","state","Object","values","items","refreshGeofences","response","fetch","ok","refresh","json","addControl","on","event","feature","features","newItem","name","area","geometry","delete","method","headers","body","JSON","stringify","item","push","find","i","updatedItem","removeControl","deleteAll","forEach","geofence","add"],"mappings":"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","sourcesContent":["import 'mapbox-gl/dist/mapbox-gl.css';\r\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\r\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\r\nimport theme from '@mapbox/mapbox-gl-draw/src/lib/theme';\r\nimport { useEffect } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { map } from './Map';\r\nimport { geofenceToFeature, geometryToArea } from './mapUtil';\r\nimport { geofencesActions } from '../store';\r\n\r\nconst draw = new MapboxDraw({\r\n  displayControlsDefault: false,\r\n  controls: {\r\n    polygon: true,\r\n    trash: true,\r\n  },\r\n  userProperties: true,\r\n  styles: [...theme, {\r\n    id: 'gl-draw-title',\r\n    type: 'symbol',\r\n    filter: ['all'],\r\n    layout: {\r\n      'text-field': '{user_name}',\r\n      'text-font': ['Roboto Regular'],\r\n      'text-size': 12,\r\n    },\r\n    paint: {\r\n      'text-halo-color': 'white',\r\n      'text-halo-width': 1,\r\n    },\r\n  }],\r\n});\r\n\r\nconst GeofenceEditMap = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const geofences = useSelector((state) => Object.values(state.geofences.items));\r\n\r\n  const refreshGeofences = async () => {\r\n    const response = await fetch('/api/geofences');\r\n    if (response.ok) {\r\n      dispatch(geofencesActions.refresh(await response.json()));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshGeofences();\r\n\r\n    map.addControl(draw, 'top-left');\r\n\r\n    map.on('draw.create', async (event) => {\r\n      const feature = event.features[0];\r\n      const newItem = { name: '', area: geometryToArea(feature.geometry) };\r\n      draw.delete(feature.id);\r\n      const response = await fetch('/api/geofences', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newItem),\r\n      });\r\n      if (response.ok) {\r\n        const item = await response.json();\r\n        history.push(`/geofence/${item.id}`);\r\n      }\r\n    });\r\n\r\n    map.on('draw.delete', async (event) => {\r\n      const feature = event.features[0];\r\n      const response = await fetch(`/api/geofences/${feature.id}`, { method: 'DELETE' });\r\n      if (response.ok) {\r\n        refreshGeofences();\r\n      }\r\n    });\r\n\r\n    map.on('draw.update', async (event) => {\r\n      const feature = event.features[0];\r\n      const item = geofences.find((i) => i.id === feature.id);\r\n      if (item) {\r\n        const updatedItem = { ...item, area: geometryToArea(feature.geometry) };\r\n        const response = await fetch(`/api/geofences/${feature.id}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(updatedItem),\r\n        });\r\n        if (response.ok) {\r\n          refreshGeofences();\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => map.removeControl(draw);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    draw.deleteAll();\r\n    geofences.forEach((geofence) => {\r\n      draw.add(geofenceToFeature(geofence));\r\n    });\r\n  }, [geofences]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default GeofenceEditMap;\r\n"]},"metadata":{},"sourceType":"module"}