{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal_Projects\\\\Vehicle Tracking\\\\Development2.0\\\\JFRD-ULTRAKER\\\\traccar-web\\\\modern\\\\src\\\\attributes\\\\AddAttributeDialog.js\";\nimport React, { useState } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\nimport { Autocomplete, createFilterOptions } from '@material-ui/lab';\nimport t from '../common/localization';\n\nconst AddAttributeDialog = _ref => {\n  let {\n    open,\n    onResult,\n    definitions\n  } = _ref;\n  const filter = createFilterOptions({\n    stringify: option => option.name\n  });\n  const options = Object.entries(definitions).map(_ref2 => {\n    let [key, value] = _ref2;\n    return {\n      key,\n      name: value.name,\n      type: value.type\n    };\n  });\n  const [key, setKey] = useState();\n  const [type, setType] = useState('string');\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    fullWidth: true,\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    onChange: (_, option) => {\n      setKey(option && typeof option === 'object' ? option.key : option);\n\n      if (option && option.type) {\n        setType(option.type);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n\n      if (params.inputValue) {\n        filtered.push({\n          key: params.inputValue,\n          name: params.inputValue\n        });\n      }\n\n      return filtered;\n    },\n    options: options,\n    getOptionLabel: option => option && typeof option === 'object' ? option.name : option,\n    renderOption: option => option.name,\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: t('sharedAttribute'),\n      variant: \"filled\",\n      margin: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"filled\",\n    margin: \"normal\",\n    fullWidth: true,\n    disabled: key in definitions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, t('sharedType')), /*#__PURE__*/React.createElement(Select, {\n    value: type,\n    onChange: e => setType(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"string\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, t('sharedTypeString')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, t('sharedTypeNumber')), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"boolean\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, t('sharedTypeBoolean'))))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    disabled: !key,\n    onClick: () => onResult({\n      key,\n      type\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, t('sharedAdd')), /*#__PURE__*/React.createElement(Button, {\n    autoFocus: true,\n    onClick: () => onResult(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, t('sharedCancel'))));\n};\n\nexport default AddAttributeDialog;","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/attributes/AddAttributeDialog.js"],"names":["React","useState","Button","Dialog","DialogActions","DialogContent","FormControl","InputLabel","MenuItem","Select","TextField","Autocomplete","createFilterOptions","t","AddAttributeDialog","open","onResult","definitions","filter","stringify","option","name","options","Object","entries","map","key","value","type","setKey","setType","_","params","filtered","inputValue","push","e","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Button, Dialog, DialogActions, DialogContent, FormControl, InputLabel, MenuItem, Select, TextField,\r\n} from '@material-ui/core';\r\n\r\nimport { Autocomplete, createFilterOptions } from '@material-ui/lab';\r\nimport t from '../common/localization';\r\n\r\nconst AddAttributeDialog = ({ open, onResult, definitions }) => {\r\n  const filter = createFilterOptions({\r\n    stringify: (option) => option.name,\r\n  });\r\n\r\n  const options = Object.entries(definitions).map(([key, value]) => ({\r\n    key,\r\n    name: value.name,\r\n    type: value.type,\r\n  }));\r\n\r\n  const [key, setKey] = useState();\r\n  const [type, setType] = useState('string');\r\n\r\n  return (\r\n    <Dialog open={open} fullWidth maxWidth=\"xs\">\r\n      <DialogContent>\r\n        <Autocomplete\r\n          onChange={(_, option) => {\r\n            setKey(option && typeof option === 'object' ? option.key : option);\r\n            if (option && option.type) {\r\n              setType(option.type);\r\n            }\r\n          }}\r\n          filterOptions={(options, params) => {\r\n            const filtered = filter(options, params);\r\n            if (params.inputValue) {\r\n              filtered.push({\r\n                key: params.inputValue,\r\n                name: params.inputValue,\r\n              });\r\n            }\r\n            return filtered;\r\n          }}\r\n          options={options}\r\n          getOptionLabel={(option) => (option && typeof option === 'object' ? option.name : option)}\r\n          renderOption={(option) => option.name}\r\n          freeSolo\r\n          renderInput={(params) => (\r\n            <TextField {...params} label={t('sharedAttribute')} variant=\"filled\" margin=\"normal\" />\r\n          )}\r\n        />\r\n        <FormControl\r\n          variant=\"filled\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          disabled={key in definitions}\r\n        >\r\n          <InputLabel>{t('sharedType')}</InputLabel>\r\n          <Select\r\n            value={type}\r\n            onChange={(e) => setType(e.target.value)}\r\n          >\r\n            <MenuItem value=\"string\">{t('sharedTypeString')}</MenuItem>\r\n            <MenuItem value=\"number\">{t('sharedTypeNumber')}</MenuItem>\r\n            <MenuItem value=\"boolean\">{t('sharedTypeBoolean')}</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          color=\"primary\"\r\n          disabled={!key}\r\n          onClick={() => onResult({ key, type })}\r\n        >\r\n          {t('sharedAdd')}\r\n        </Button>\r\n        <Button\r\n          autoFocus\r\n          onClick={() => onResult(null)}\r\n        >\r\n          {t('sharedCancel')}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddAttributeDialog;\r\n"]},"metadata":{},"sourceType":"module"}