{"ast":null,"code":"import { parse, stringify } from 'wellknown';\nimport canvasTintImage from 'canvas-tint-image';\nimport circle from '@turf/circle';\nexport const loadImage = url => new Promise(imageLoaded => {\n  const image = new Image();\n\n  image.onload = () => imageLoaded(image);\n\n  image.src = url;\n});\nexport const prepareIcon = (background, icon, color) => {\n  const pixelRatio = window.devicePixelRatio;\n  const canvas = document.createElement('canvas');\n  canvas.width = background.width * pixelRatio;\n  canvas.height = background.height * pixelRatio;\n  canvas.style.width = `${background.width}px`;\n  canvas.style.height = `${background.height}px`;\n  const context = canvas.getContext('2d');\n  context.drawImage(background, 0, 0, canvas.width, canvas.height);\n\n  if (icon) {\n    const iconRatio = 0.5;\n    const imageWidth = canvas.width * iconRatio;\n    const imageHeight = canvas.height * iconRatio;\n    context.drawImage(canvasTintImage(icon, color, 1), (canvas.width - imageWidth) / 2, (canvas.height - imageHeight) / 2, imageWidth, imageHeight);\n  }\n\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n};\nexport const reverseCoordinates = it => {\n  if (!it) {\n    return it;\n  }\n\n  if (Array.isArray(it)) {\n    if (it.length === 2 && !Number.isNaN(it[0]) && !Number.isNaN(it[1])) {\n      return [it[1], it[0]];\n    }\n\n    return it.map(it => reverseCoordinates(it));\n  }\n\n  return { ...it,\n    coordinates: reverseCoordinates(it.coordinates)\n  };\n};\nexport const geofenceToFeature = item => {\n  if (item.area.indexOf('CIRCLE') > -1) {\n    const coordinates = item.area.replace(/CIRCLE|\\(|\\)|,/g, ' ').trim().split(/ +/);\n    const options = {\n      steps: 32,\n      units: 'meters'\n    };\n    const polygon = circle([Number(coordinates[1]), Number(coordinates[0])], Number(coordinates[2]), options);\n    return {\n      id: item.id,\n      type: 'Feature',\n      geometry: polygon.geometry,\n      properties: {\n        name: item.name\n      }\n    };\n  }\n\n  return {\n    id: item.id,\n    type: 'Feature',\n    geometry: reverseCoordinates(parse(item.area)),\n    properties: {\n      name: item.name\n    }\n  };\n};\nexport const geometryToArea = geometry => stringify(reverseCoordinates(geometry));","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/map/mapUtil.js"],"names":["parse","stringify","canvasTintImage","circle","loadImage","url","Promise","imageLoaded","image","Image","onload","src","prepareIcon","background","icon","color","pixelRatio","window","devicePixelRatio","canvas","document","createElement","width","height","style","context","getContext","drawImage","iconRatio","imageWidth","imageHeight","getImageData","reverseCoordinates","it","Array","isArray","length","Number","isNaN","map","coordinates","geofenceToFeature","item","area","indexOf","replace","trim","split","options","steps","units","polygon","id","type","geometry","properties","name","geometryToArea"],"mappings":"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","sourcesContent":["import { parse, stringify } from 'wellknown';\r\nimport canvasTintImage from 'canvas-tint-image';\r\nimport circle from '@turf/circle';\r\n\r\nexport const loadImage = (url) => new Promise((imageLoaded) => {\r\n  const image = new Image();\r\n  image.onload = () => imageLoaded(image);\r\n  image.src = url;\r\n});\r\n\r\nexport const prepareIcon = (background, icon, color) => {\r\n  const pixelRatio = window.devicePixelRatio;\r\n\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = background.width * pixelRatio;\r\n  canvas.height = background.height * pixelRatio;\r\n  canvas.style.width = `${background.width}px`;\r\n  canvas.style.height = `${background.height}px`;\r\n\r\n  const context = canvas.getContext('2d');\r\n  context.drawImage(background, 0, 0, canvas.width, canvas.height);\r\n\r\n  if (icon) {\r\n    const iconRatio = 0.5;\r\n    const imageWidth = canvas.width * iconRatio;\r\n    const imageHeight = canvas.height * iconRatio;\r\n    context.drawImage(canvasTintImage(icon, color, 1), (canvas.width - imageWidth) / 2, (canvas.height - imageHeight) / 2, imageWidth, imageHeight);\r\n  }\r\n\r\n  return context.getImageData(0, 0, canvas.width, canvas.height);\r\n};\r\n\r\nexport const reverseCoordinates = (it) => {\r\n  if (!it) {\r\n    return it;\r\n  } if (Array.isArray(it)) {\r\n    if (it.length === 2 && !Number.isNaN(it[0]) && !Number.isNaN(it[1])) {\r\n      return [it[1], it[0]];\r\n    }\r\n    return it.map((it) => reverseCoordinates(it));\r\n  }\r\n  return {\r\n    ...it,\r\n    coordinates: reverseCoordinates(it.coordinates),\r\n  };\r\n};\r\n\r\nexport const geofenceToFeature = (item) => {\r\n  if (item.area.indexOf('CIRCLE') > -1) {\r\n    const coordinates = item.area.replace(/CIRCLE|\\(|\\)|,/g, ' ').trim().split(/ +/);\r\n    const options = { steps: 32, units: 'meters' };\r\n    const polygon = circle([Number(coordinates[1]), Number(coordinates[0])], Number(coordinates[2]), options);\r\n    return {\r\n      id: item.id,\r\n      type: 'Feature',\r\n      geometry: polygon.geometry,\r\n      properties: { name: item.name },\r\n    };\r\n  }\r\n  return {\r\n    id: item.id,\r\n    type: 'Feature',\r\n    geometry: reverseCoordinates(parse(item.area)),\r\n    properties: { name: item.name },\r\n  };\r\n};\r\n\r\nexport const geometryToArea = (geometry) => stringify(reverseCoordinates(geometry));\r\n"]},"metadata":{},"sourceType":"module"}