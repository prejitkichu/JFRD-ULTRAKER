{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal_Projects\\\\Vehicle Tracking\\\\Development2.0\\\\JFRD-ULTRAKER\\\\traccar-web\\\\modern\\\\src\\\\map\\\\PositionsMap.js\";\nimport React, { useCallback, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport maplibregl from 'maplibre-gl';\nimport { Provider, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { map } from './Map';\nimport store from '../store';\nimport StatusView from './StatusView';\nimport theme from '../theme';\n\nconst PositionsMap = _ref => {\n  let {\n    positions\n  } = _ref;\n  const id = 'positions';\n  const clusters = `${id}-clusters`;\n  const history = useHistory();\n  const devices = useSelector(state => state.devices.items);\n\n  const deviceColor = device => {\n    switch (device.status) {\n      case 'online':\n        return 'green';\n\n      case 'offline':\n        return 'red';\n\n      default:\n        return 'gray';\n    }\n  };\n\n  const createFeature = (devices, position) => {\n    const device = devices[position.deviceId];\n    return {\n      deviceId: position.deviceId,\n      name: device.name,\n      category: device.category || 'default',\n      color: deviceColor(device)\n    };\n  };\n\n  const onMouseEnter = () => map.getCanvas().style.cursor = 'pointer';\n\n  const onMouseLeave = () => map.getCanvas().style.cursor = '';\n\n  const onMarkerClick = useCallback(event => {\n    const feature = event.features[0];\n    const coordinates = feature.geometry.coordinates.slice();\n\n    while (Math.abs(event.lngLat.lng - coordinates[0]) > 180) {\n      coordinates[0] += event.lngLat.lng > coordinates[0] ? 360 : -360;\n    }\n\n    const placeholder = document.createElement('div');\n    ReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(StatusView, {\n      deviceId: feature.properties.deviceId,\n      onShowDetails: positionId => history.push(`/position/${positionId}`),\n      onShowHistory: () => history.push('/replay'),\n      onEditClick: deviceId => history.push(`/device/${deviceId}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }))), placeholder);\n    new maplibregl.Popup({\n      offset: 25,\n      anchor: 'top'\n    }).setDOMContent(placeholder).setLngLat(coordinates).addTo(map);\n  }, [history]);\n\n  const onClusterClick = event => {\n    const features = map.queryRenderedFeatures(event.point, {\n      layers: [clusters]\n    });\n    const clusterId = features[0].properties.cluster_id;\n    map.getSource(id).getClusterExpansionZoom(clusterId, (error, zoom) => {\n      if (!error) {\n        map.easeTo({\n          center: features[0].geometry.coordinates,\n          zoom\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    map.addSource(id, {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: []\n      },\n      cluster: true,\n      clusterMaxZoom: 14,\n      clusterRadius: 50\n    });\n    map.addLayer({\n      id,\n      type: 'symbol',\n      source: id,\n      filter: ['!', ['has', 'point_count']],\n      layout: {\n        'icon-image': '{category}-{color}',\n        'icon-allow-overlap': true,\n        'text-field': '{name}',\n        'text-allow-overlap': true,\n        'text-anchor': 'bottom',\n        'text-offset': [0, -2],\n        'text-font': ['Roboto Regular'],\n        'text-size': 12\n      },\n      paint: {\n        'text-halo-color': 'white',\n        'text-halo-width': 1\n      }\n    });\n    map.addLayer({\n      id: clusters,\n      type: 'symbol',\n      source: id,\n      filter: ['has', 'point_count'],\n      layout: {\n        'icon-image': 'background',\n        'text-field': '{point_count_abbreviated}',\n        'text-font': ['Roboto Regular'],\n        'text-size': 14\n      }\n    });\n    map.on('mouseenter', id, onMouseEnter);\n    map.on('mouseleave', id, onMouseLeave);\n    map.on('mouseenter', clusters, onMouseEnter);\n    map.on('mouseleave', clusters, onMouseLeave);\n    map.on('click', id, onMarkerClick);\n    map.on('click', clusters, onClusterClick);\n    return () => {\n      Array.from(map.getContainer().getElementsByClassName('maplibregl-popup')).forEach(el => el.remove());\n      map.off('mouseenter', id, onMouseEnter);\n      map.off('mouseleave', id, onMouseLeave);\n      map.off('mouseenter', clusters, onMouseEnter);\n      map.off('mouseleave', clusters, onMouseLeave);\n      map.off('click', id, onMarkerClick);\n      map.off('click', clusters, onClusterClick);\n      map.removeLayer(id);\n      map.removeLayer(clusters);\n      map.removeSource(id);\n    };\n  }, [onMarkerClick]);\n  useEffect(() => {\n    map.getSource(id).setData({\n      type: 'FeatureCollection',\n      features: positions.filter(it => devices.hasOwnProperty(it.deviceId)).map(position => ({\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [position.longitude, position.latitude]\n        },\n        properties: createFeature(devices, position)\n      }))\n    });\n  }, [devices, positions]);\n  return null;\n};\n\nexport default PositionsMap;","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/map/PositionsMap.js"],"names":["React","useCallback","useEffect","ReactDOM","ThemeProvider","maplibregl","Provider","useSelector","useHistory","map","store","StatusView","theme","PositionsMap","positions","id","clusters","history","devices","state","items","deviceColor","device","status","createFeature","position","deviceId","name","category","color","onMouseEnter","getCanvas","style","cursor","onMouseLeave","onMarkerClick","event","feature","features","coordinates","geometry","slice","Math","abs","lngLat","lng","placeholder","document","createElement","render","properties","positionId","push","Popup","offset","anchor","setDOMContent","setLngLat","addTo","onClusterClick","queryRenderedFeatures","point","layers","clusterId","cluster_id","getSource","getClusterExpansionZoom","error","zoom","easeTo","center","addSource","type","data","cluster","clusterMaxZoom","clusterRadius","addLayer","source","filter","layout","paint","on","Array","from","getContainer","getElementsByClassName","forEach","el","remove","off","removeLayer","removeSource","setData","it","hasOwnProperty","longitude","latitude"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport maplibregl from 'maplibre-gl';\r\nimport { Provider, useSelector } from 'react-redux';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { map } from './Map';\r\nimport store from '../store';\r\nimport StatusView from './StatusView';\r\nimport theme from '../theme';\r\n\r\nconst PositionsMap = ({ positions }) => {\r\n  const id = 'positions';\r\n  const clusters = `${id}-clusters`;\r\n\r\n  const history = useHistory();\r\n  const devices = useSelector((state) => state.devices.items);\r\n\r\n  const deviceColor = (device) => {\r\n    switch (device.status) {\r\n      case 'online':\r\n        return 'green';\r\n      case 'offline':\r\n        return 'red';\r\n      default:\r\n        return 'gray';\r\n    }\r\n  };\r\n\r\n  const createFeature = (devices, position) => {\r\n    const device = devices[position.deviceId];\r\n    return {\r\n      deviceId: position.deviceId,\r\n      name: device.name,\r\n      category: device.category || 'default',\r\n      color: deviceColor(device),\r\n    };\r\n  };\r\n\r\n  const onMouseEnter = () => map.getCanvas().style.cursor = 'pointer';\r\n  const onMouseLeave = () => map.getCanvas().style.cursor = '';\r\n\r\n  const onMarkerClick = useCallback((event) => {\r\n    const feature = event.features[0];\r\n    const coordinates = feature.geometry.coordinates.slice();\r\n    while (Math.abs(event.lngLat.lng - coordinates[0]) > 180) {\r\n      coordinates[0] += event.lngLat.lng > coordinates[0] ? 360 : -360;\r\n    }\r\n\r\n    const placeholder = document.createElement('div');\r\n    ReactDOM.render(\r\n      <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n          <StatusView\r\n            deviceId={feature.properties.deviceId}\r\n            onShowDetails={(positionId) => history.push(`/position/${positionId}`)}\r\n            onShowHistory={() => history.push('/replay')}\r\n            onEditClick={(deviceId) => history.push(`/device/${deviceId}`)}\r\n          />\r\n        </ThemeProvider>\r\n      </Provider>,\r\n      placeholder,\r\n    );\r\n\r\n    new maplibregl.Popup({\r\n      offset: 25,\r\n      anchor: 'top',\r\n    })\r\n      .setDOMContent(placeholder)\r\n      .setLngLat(coordinates)\r\n      .addTo(map);\r\n  }, [history]);\r\n\r\n  const onClusterClick = (event) => {\r\n    const features = map.queryRenderedFeatures(event.point, {\r\n      layers: [clusters],\r\n    });\r\n    const clusterId = features[0].properties.cluster_id;\r\n    map.getSource(id).getClusterExpansionZoom(clusterId, (error, zoom) => {\r\n      if (!error) {\r\n        map.easeTo({\r\n          center: features[0].geometry.coordinates,\r\n          zoom,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    map.addSource(id, {\r\n      type: 'geojson',\r\n      data: {\r\n        type: 'FeatureCollection',\r\n        features: [],\r\n      },\r\n      cluster: true,\r\n      clusterMaxZoom: 14,\r\n      clusterRadius: 50,\r\n    });\r\n    map.addLayer({\r\n      id,\r\n      type: 'symbol',\r\n      source: id,\r\n      filter: ['!', ['has', 'point_count']],\r\n      layout: {\r\n        'icon-image': '{category}-{color}',\r\n        'icon-allow-overlap': true,\r\n        'text-field': '{name}',\r\n        'text-allow-overlap': true,\r\n        'text-anchor': 'bottom',\r\n        'text-offset': [0, -2],\r\n        'text-font': ['Roboto Regular'],\r\n        'text-size': 12,\r\n      },\r\n      paint: {\r\n        'text-halo-color': 'white',\r\n        'text-halo-width': 1,\r\n      },\r\n    });\r\n    map.addLayer({\r\n      id: clusters,\r\n      type: 'symbol',\r\n      source: id,\r\n      filter: ['has', 'point_count'],\r\n      layout: {\r\n        'icon-image': 'background',\r\n        'text-field': '{point_count_abbreviated}',\r\n        'text-font': ['Roboto Regular'],\r\n        'text-size': 14,\r\n      },\r\n    });\r\n\r\n    map.on('mouseenter', id, onMouseEnter);\r\n    map.on('mouseleave', id, onMouseLeave);\r\n    map.on('mouseenter', clusters, onMouseEnter);\r\n    map.on('mouseleave', clusters, onMouseLeave);\r\n    map.on('click', id, onMarkerClick);\r\n    map.on('click', clusters, onClusterClick);\r\n\r\n    return () => {\r\n      Array.from(map.getContainer().getElementsByClassName('maplibregl-popup')).forEach((el) => el.remove());\r\n\r\n      map.off('mouseenter', id, onMouseEnter);\r\n      map.off('mouseleave', id, onMouseLeave);\r\n      map.off('mouseenter', clusters, onMouseEnter);\r\n      map.off('mouseleave', clusters, onMouseLeave);\r\n      map.off('click', id, onMarkerClick);\r\n      map.off('click', clusters, onClusterClick);\r\n\r\n      map.removeLayer(id);\r\n      map.removeLayer(clusters);\r\n      map.removeSource(id);\r\n    };\r\n  }, [onMarkerClick]);\r\n\r\n  useEffect(() => {\r\n    map.getSource(id).setData({\r\n      type: 'FeatureCollection',\r\n      features: positions.filter((it) => devices.hasOwnProperty(it.deviceId)).map((position) => ({\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: [position.longitude, position.latitude],\r\n        },\r\n        properties: createFeature(devices, position),\r\n      })),\r\n    });\r\n  }, [devices, positions]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default PositionsMap;\r\n"]},"metadata":{},"sourceType":"module"}