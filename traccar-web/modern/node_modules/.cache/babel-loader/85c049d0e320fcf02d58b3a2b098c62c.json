{"ast":null,"code":"import moment from 'moment';\nimport t from './localization';\nexport const formatBoolean = value => value ? t('sharedYes') : t('sharedNo');\nexport const formatNumber = function (value) {\n  let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return Number(value.toFixed(precision));\n};\nexport const formatDate = function (value) {\n  let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD HH:mm';\n  return moment(value).format(format);\n};\nexport const formatPosition = (value, key) => {\n  if (value != null && typeof value === 'object') {\n    value = value[key];\n  }\n\n  switch (key) {\n    case 'fixTime':\n    case 'deviceTime':\n    case 'serverTime':\n    case 'eventTime':\n      return moment(value).format('LLL');\n\n    case 'latitude':\n    case 'longitude':\n      return value.toFixed(5);\n\n    case 'speed':\n    case 'course':\n      return value.toFixed(1);\n\n    case 'batteryLevel':\n      return `${value}%`;\n\n    default:\n      if (typeof value === 'number') {\n        return formatNumber(value);\n      }\n\n      if (typeof value === 'boolean') {\n        return formatBoolean(value);\n      }\n\n      return value;\n  }\n};\nexport const formatDistance = (value, unit) => {\n  switch (unit) {\n    case 'mi':\n      return `${(value * 0.000621371).toFixed(2)} ${t('sharedMi')}`;\n\n    case 'nmi':\n      return `${(value * 0.000539957).toFixed(2)} ${t('sharedNmi')}`;\n\n    case 'km':\n    default:\n      return `${(value * 0.001).toFixed(2)} ${t('sharedKm')}`;\n  }\n};\nexport const formatSpeed = (value, unit) => {\n  switch (unit) {\n    case 'kmh':\n      return `${(value * 1.852).toFixed(2)} ${t('sharedKmh')}`;\n\n    case 'mph':\n      return `${(value * 1.15078).toFixed(2)} ${t('sharedMph')}`;\n\n    case 'kn':\n    default:\n      return `${(value * 1).toFixed(2)} ${t('sharedKn')}`;\n  }\n};\nexport const formatVolume = (value, unit) => {\n  switch (unit) {\n    case 'impGal':\n      return `${(value / 4.546).toFixed(2)} ${t('sharedGallonAbbreviation')}`;\n\n    case 'usGal':\n      return `${(value / 3.785).toFixed(2)} ${t('sharedGallonAbbreviation')}`;\n\n    case 'ltr':\n    default:\n      return `${(value / 1).toFixed(2)} ${t('sharedLiterAbbreviation')}`;\n  }\n};\nexport const formatHours = value => moment.duration(value).humanize();\nexport const formatCoordinate = (key, value, unit) => {\n  let hemisphere;\n  let degrees;\n  let minutes;\n  let seconds;\n\n  if (key === 'latitude') {\n    hemisphere = value >= 0 ? 'N' : 'S';\n  } else {\n    hemisphere = value >= 0 ? 'E' : 'W';\n  }\n\n  switch (unit) {\n    case 'ddm':\n      value = Math.abs(value);\n      degrees = Math.floor(value);\n      minutes = (value - degrees) * 60;\n      return `${degrees}° ${minutes.toFixed(6)}' ${hemisphere}`;\n\n    case 'dms':\n      value = Math.abs(value);\n      degrees = Math.floor(value);\n      minutes = Math.floor((value - degrees) * 60);\n      seconds = Math.round((value - degrees - minutes / 60) * 3600);\n      return `${degrees}° ${minutes}' ${seconds}\" ${hemisphere}`;\n\n    default:\n      return `${value.toFixed(6)}°`;\n  }\n};\nexport const getStatusColor = status => {\n  switch (status) {\n    case 'online':\n      return 'green';\n\n    case 'offline':\n      return 'red';\n\n    case 'unknown':\n    default:\n      return 'gray';\n  }\n};\nexport const getBatteryStatus = batteryLevel => {\n  if (batteryLevel >= 70) {\n    return 'green';\n  }\n\n  if (batteryLevel > 30) {\n    return 'gray';\n  }\n\n  return 'red';\n};","map":{"version":3,"sources":["D:/Personal_Projects/Vehicle Tracking/Development2.0/JFRD-ULTRAKER/traccar-web/modern/src/common/formatter.js"],"names":["moment","t","formatBoolean","value","formatNumber","precision","Number","toFixed","formatDate","format","formatPosition","key","formatDistance","unit","formatSpeed","formatVolume","formatHours","duration","humanize","formatCoordinate","hemisphere","degrees","minutes","seconds","Math","abs","floor","round","getStatusColor","status","getBatteryStatus","batteryLevel"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport t from './localization';\r\n\r\nexport const formatBoolean = (value) => (value ? t('sharedYes') : t('sharedNo'));\r\n\r\nexport const formatNumber = (value, precision = 1) => Number(value.toFixed(precision));\r\n\r\nexport const formatDate = (value, format = 'YYYY-MM-DD HH:mm') => moment(value).format(format);\r\n\r\nexport const formatPosition = (value, key) => {\r\n  if (value != null && typeof value === 'object') {\r\n    value = value[key];\r\n  }\r\n  switch (key) {\r\n    case 'fixTime':\r\n    case 'deviceTime':\r\n    case 'serverTime':\r\n    case 'eventTime':\r\n      return moment(value).format('LLL');\r\n    case 'latitude':\r\n    case 'longitude':\r\n      return value.toFixed(5);\r\n    case 'speed':\r\n    case 'course':\r\n      return value.toFixed(1);\r\n    case 'batteryLevel':\r\n      return `${value}%`;\r\n    default:\r\n      if (typeof value === 'number') {\r\n        return formatNumber(value);\r\n      } if (typeof value === 'boolean') {\r\n        return formatBoolean(value);\r\n      }\r\n      return value;\r\n  }\r\n};\r\n\r\nexport const formatDistance = (value, unit) => {\r\n  switch (unit) {\r\n    case 'mi':\r\n      return `${(value * 0.000621371).toFixed(2)} ${t('sharedMi')}`;\r\n    case 'nmi':\r\n      return `${(value * 0.000539957).toFixed(2)} ${t('sharedNmi')}`;\r\n    case 'km':\r\n    default:\r\n      return `${(value * 0.001).toFixed(2)} ${t('sharedKm')}`;\r\n  }\r\n};\r\n\r\nexport const formatSpeed = (value, unit) => {\r\n  switch (unit) {\r\n    case 'kmh':\r\n      return `${(value * 1.852).toFixed(2)} ${t('sharedKmh')}`;\r\n    case 'mph':\r\n      return `${(value * 1.15078).toFixed(2)} ${t('sharedMph')}`;\r\n    case 'kn':\r\n    default:\r\n      return `${(value * 1).toFixed(2)} ${t('sharedKn')}`;\r\n  }\r\n};\r\n\r\nexport const formatVolume = (value, unit) => {\r\n  switch (unit) {\r\n    case 'impGal':\r\n      return `${(value / 4.546).toFixed(2)} ${t('sharedGallonAbbreviation')}`;\r\n    case 'usGal':\r\n      return `${(value / 3.785).toFixed(2)} ${t('sharedGallonAbbreviation')}`;\r\n    case 'ltr':\r\n    default:\r\n      return `${(value / 1).toFixed(2)} ${t('sharedLiterAbbreviation')}`;\r\n  }\r\n};\r\n\r\nexport const formatHours = (value) => moment.duration(value).humanize();\r\n\r\nexport const formatCoordinate = (key, value, unit) => {\r\n  let hemisphere; let degrees; let minutes; let\r\n    seconds;\r\n  if (key === 'latitude') {\r\n    hemisphere = value >= 0 ? 'N' : 'S';\r\n  } else {\r\n    hemisphere = value >= 0 ? 'E' : 'W';\r\n  }\r\n\r\n  switch (unit) {\r\n    case 'ddm':\r\n      value = Math.abs(value);\r\n      degrees = Math.floor(value);\r\n      minutes = (value - degrees) * 60;\r\n      return `${degrees}° ${minutes.toFixed(6)}' ${hemisphere}`;\r\n    case 'dms':\r\n      value = Math.abs(value);\r\n      degrees = Math.floor(value);\r\n      minutes = Math.floor((value - degrees) * 60);\r\n      seconds = Math.round((value - degrees - minutes / 60) * 3600);\r\n      return `${degrees}° ${minutes}' ${seconds}\" ${hemisphere}`;\r\n    default:\r\n      return `${value.toFixed(6)}°`;\r\n  }\r\n};\r\n\r\nexport const getStatusColor = (status) => {\r\n  switch (status) {\r\n    case 'online':\r\n      return 'green';\r\n    case 'offline':\r\n      return 'red';\r\n    case 'unknown':\r\n    default:\r\n      return 'gray';\r\n  }\r\n};\r\n\r\nexport const getBatteryStatus = (batteryLevel) => {\r\n  if (batteryLevel >= 70) {\r\n    return 'green';\r\n  }\r\n  if (batteryLevel > 30) {\r\n    return 'gray';\r\n  }\r\n  return 'red';\r\n};\r\n"]},"metadata":{},"sourceType":"module"}